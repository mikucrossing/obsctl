name: release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-midi-native:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.24.x'
      - name: Run tests
        run: go test ./...
      - name: Prepare (env + deps)
        shell: bash
        run: |
          mkdir -p dist
          VERSION=${GITHUB_REF_NAME:-dev}
          VERSION=${VERSION#v}
          COMMIT=$(git rev-parse --short HEAD)
          DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "COMMIT=$COMMIT" >> $GITHUB_ENV
          echo "DATE=$DATE" >> $GITHUB_ENV
          echo "LDFLAGS=-s -w -X main.version=$VERSION -X main.commit=$COMMIT -X main.date=$DATE" >> $GITHUB_ENV
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            sudo apt-get update
            sudo apt-get install -y build-essential pkg-config libasound2-dev
          fi
      - name: Install MinGW-w64 (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          choco install -y mingw
      - name: Setup MSYS2 (clangarm64 toolchain for ARM64)
        if: runner.os == 'Windows'
        uses: msys2/setup-msys2@v2
        with:
          update: true
          msystem: clangarm64
          install: >-
            base-devel
            mingw-w64-clang-aarch64-toolchain
      - name: Build Linux (midi_native)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          set -eux
          CGO_ENABLED=1 go build -tags midi_native -trimpath -ldflags "$LDFLAGS" -o dist/obsctl_linux_amd64_midi_native ./cmd/obsctl
      - name: Package Linux artifact
        if: runner.os == 'Linux'
        shell: bash
        run: |
          set -eux
          install -m 0755 dist/obsctl_linux_amd64_midi_native dist/obsctl
          tar -C dist -czf dist/obsctl_linux_amd64_midi_native.tar.gz obsctl
          rm -f dist/obsctl dist/obsctl_linux_amd64_midi_native
      - name: Build macOS Universal (midi_native)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          set -eux
          CGO_ENABLED=1 GOOS=darwin GOARCH=arm64 go build -tags midi_native -trimpath -ldflags "$LDFLAGS" -o dist/obsctl_darwin_arm64_midi_native ./cmd/obsctl
          CGO_ENABLED=1 GOOS=darwin GOARCH=amd64 go build -tags midi_native -trimpath -ldflags "$LDFLAGS" -o dist/obsctl_darwin_amd64_midi_native ./cmd/obsctl
          xcrun lipo -create \
            -output dist/obsctl_darwin_universal_midi_native \
            dist/obsctl_darwin_amd64_midi_native \
            dist/obsctl_darwin_arm64_midi_native
          rm -f dist/obsctl_darwin_amd64_midi_native dist/obsctl_darwin_arm64_midi_native
      - name: Package macOS artifact
        if: runner.os == 'macOS'
        shell: bash
        run: |
          set -eux
          install -m 0755 dist/obsctl_darwin_universal_midi_native dist/obsctl
          (cd dist && zip -9 obsctl_darwin_universal_midi_native.zip obsctl)
          rm -f dist/obsctl dist/obsctl_darwin_universal_midi_native
      - name: Build Windows amd64 (midi_native)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $env:CC = "x86_64-w64-mingw32-gcc"
          $env:CXX = "x86_64-w64-mingw32-g++"
          $env:CGO_ENABLED = "1"
          $env:GOOS = "windows"
          $env:GOARCH = "amd64"
          go build -tags midi_native -trimpath -ldflags "$env:LDFLAGS" -o dist/obsctl_windows_amd64_midi_native.exe ./cmd/obsctl
      - name: Build Windows arm64 (midi_native, best-effort)
        if: runner.os == 'Windows'
        continue-on-error: true
        shell: pwsh
        run: |
          # Use LLVM-Mingw via MSYS2 clangarm64 toolchain if available
          $clang = "C:\msys64\clangarm64\bin\clang.exe"
          $clangpp = "C:\msys64\clangarm64\bin\clang++.exe"
          if (Test-Path $clang -PathType Leaf) {
            $env:CC = $clang
            $env:CXX = $clangpp
            $env:CGO_CFLAGS = "--target=aarch64-w64-mingw32"
            $env:CGO_CXXFLAGS = "--target=aarch64-w64-mingw32"
            $env:CGO_LDFLAGS = "--target=aarch64-w64-mingw32"
          } else {
            Write-Host "clangarm64 toolchain not found; skipping ARM64 build"
            exit 0
          }
          $env:CGO_ENABLED = "1"
          $env:GOOS = "windows"
          $env:GOARCH = "arm64"
          go build -tags midi_native -trimpath -ldflags "$env:LDFLAGS" -o dist/obsctl_windows_arm64_midi_native.exe ./cmd/obsctl
      - name: Package Windows artifacts
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Set-StrictMode -Version Latest
          $ErrorActionPreference = 'Stop'
          if (Test-Path dist/obsctl_windows_amd64_midi_native.exe) {
            Copy-Item dist/obsctl_windows_amd64_midi_native.exe dist/obsctl.exe -Force
            Compress-Archive -Path dist/obsctl.exe -DestinationPath dist/obsctl_windows_amd64_midi_native.zip -Force
            Remove-Item dist/obsctl.exe, dist/obsctl_windows_amd64_midi_native.exe -Force
          }
          if (Test-Path dist/obsctl_windows_arm64_midi_native.exe) {
            Copy-Item dist/obsctl_windows_arm64_midi_native.exe dist/obsctl.exe -Force
            Compress-Archive -Path dist/obsctl.exe -DestinationPath dist/obsctl_windows_arm64_midi_native.zip -Force
            Remove-Item dist/obsctl.exe, dist/obsctl_windows_arm64_midi_native.exe -Force
          }
      - uses: actions/upload-artifact@v4
        with:
          name: binaries-midi-native-${{ runner.os }}
          path: dist/**

  release:
    needs: [build-midi-native]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true
      - name: List artifacts
        run: ls -R dist
      - name: Create GitHub Release and upload assets
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/**
